#define BLYNK_PRINT Serial 
#define BLYNK_TEMPLATE_ID "TMPL2cl9x7zBf"
#define BLYNK_TEMPLATE_NAME "Relay"
#define BLYNK_AUTH_TOKEN "eGCpxa2H89Xlavd63QJHg_5daIqDUO1Q"

#include <Wire.h>
#include <WiFi.h>
#include <EEPROM.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <HTTPClient.h>
#include <Preferences.h>
Preferences preferences;  // preferences is the name of the Preferences object.
#include <LiquidCrystal.h> 

#define EEPROM_SIZE 12

#define LED_PIN 1
#define OK_PIN 23
                          
char ssid[] = "ESP";
char pass[] = "";
char auth[] = "eGCpxa2H89Xlavd63QJHg_5daIqDUO1Q";

String apiKey = "9375650";               //Add your Token number that bot has sent you on WhatsApp messenger
String phone_number = "+254704316538"; //Add your WhatsApp app registered phone number (same number that bot send you in url)
String url;                            //url String will be used to store the final generated URL


const int rs = 32, en = 33, d4 = 25, d5 = 26, d6 = 27, d7 = 14;//sets up the lcd with the following conections to the ESP-32
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);// allows communication  using these pins

const int potPin = 34; // this is the analog pin
const int buzzPin = 18; //buzzer pin
const int numOfInputs = 4; //number of button inputs
const int inputPins[numOfInputs] = {21,03,17,22}; // defining pins with button inputs

int potValue; //actuating parameter from CT
int inputState[numOfInputs]; // menu control inputs
int lastInputState[numOfInputs] = {LOW,LOW,LOW,LOW};// iniating menu inputs as low
int highStateCount = 0;

//defining some constants
float pick;
float trials;
float triptime;
float rdelay;

float param0;
float param1;
float param2;
float param3;


const int relaypin = 16;
float voltage; 
float current;
float pricurrent;
float seccurrent;

// innitiating user action on the menu
boolean voltageAboveThreshold = false;
bool inputFlags[numOfInputs] = {LOW,LOW,LOW,LOW};
long lastDebounceTime[numOfInputs] = {0,0,0,0};
long debounceDelay = 5;

//LCD Menu Logic with 4 screens
const int numOfScreens = 4;
int currentScreen = 0;
String screens[numOfScreens][2] = {{"Actuating Value","Volts"}, {"Number of Trials", "Trials"}, 
{"Operating Time ","     "},{"Reset Time","Seconds"}};


float parameters[numOfScreens];


void setup() {
  for(int i = 0; i < numOfInputs; i++) {
    pinMode(inputPins[i], INPUT);
    digitalWrite(inputPins[i], HIGH); // pull-up 20k to ground
    } //set up to take all the buttons high

  //innitializing wifi connection
  WiFi.persistent(false);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, pass);      // Try to connect with the given SSID and PSS
  lcd.begin(16,2); 
  lcd.setCursor(0,0);  //Set cursor to first column of second row
  lcd.print("Connecting WiFi");
  delay(500);
  while (WiFi.status() != WL_CONNECTED) {  // Wait until WiFi is connected
    delay(500);
    lcd.setCursor(0,1);
    lcd.print(" searching...");
  
    
  }
    
//Wire.setClock(10000);
Blynk.begin(auth, ssid, pass);
EEPROM.begin(EEPROM_SIZE);

pinMode(relaypin, OUTPUT);
pinMode(buzzPin, OUTPUT);
pinMode(LED_PIN, OUTPUT);
pinMode(OK_PIN, INPUT); 
preferences.begin("myfile", false); //this will create and then open the namespace
                                    //the namespace is opened in read-write (RW) mode
                                    //values can be stored in to and retrieved from the namespace

lcd.begin(16, 2);   // initializing the LCD
lcd.setCursor(0,0);  //Set cursor to first column of second row
lcd.print("PROTECTION RELAY  ");
delay(500);
lcd.setCursor(0,1);  //Set cursor to first column of second row
lcd.print("Loading Menu....    ");
delay(500);


}

//reading the state of buttons to scroll through the screen
// the next screen if moved if the input is high
void setInputFlags() {
  for(int i = 0; i < numOfInputs; i++) {
    int reading = digitalRead(inputPins[i]);
    if (reading != lastInputState[i]) {
      lastDebounceTime[i] = millis(); //using waketime of ESP32
    }
    if ((millis() - lastDebounceTime[i]) > debounceDelay) {
      if (reading != inputState[i]) {
        inputState[i] = reading;
        if (inputState[i] == HIGH) {
          inputFlags[i] = HIGH;
        }
      }
    }
    lastInputState[i] = reading;
  }
}

//setting flags to allow the inputs of the buttons to control the screen
void resolveInputFlags() {
  for(int i = 0; i < numOfInputs; i++) {
    if(inputFlags[i] == HIGH) {
      inputAction(i);
      inputFlags[i] = LOW;
      printScreen();
    }
  }
}

//taking user inout to control menu on the screen
void inputAction(int input) {
  if(input == 0) { // if menu decrease button is pressed, 
    if (currentScreen == 0) {
      currentScreen = numOfScreens-1;
    }else{
      currentScreen--; // decrement the menu 
    }
  }else if(input == 1) { // if menu increase button is pressed
    if (currentScreen == numOfScreens-1) {
      currentScreen = 0;
    }else{
      currentScreen++; //increment the menu
    }
  }else if(input == 2) { // change the parameters on screen when button 2 is pressed
    parameterChange(0); // calling the parameter change loop for current screen
  }else if(input == 3) {
    parameterChange(1); // calling the parameter change loop for next current 
  }
}

// varrying the input parameters logic
void parameterChange(int key) {
  if((key == 0)&&(parameters[currentScreen]<= 3))
  // makes sire values do not go below zero or above 3.5
  {
    parameters[currentScreen]+=0.5; //increment value by 0.5
    }
  
  else if((key == 1)&&(parameters[currentScreen]> 0))
  {
    parameters[currentScreen]-=0.5; // decrement value by 0.5
  }

  /*EEPROM.writeFloat(0, parameters[0]);
  EEPROM.writeFloat(1, parameters[1]);
  EEPROM.writeFloat(2, parameters[2]);
  EEPROM.writeFloat(3, parameters[3]);
  
  EEPROM.commit();
  pick = EEPROM.readFloat(0);
  trials = EEPROM.readFloat(1);
  triptime = EEPROM.readFloat(2);
  rdelay = EEPROM.readFloat(3);*/
  


   
   /*parameters[0] = pick;
   parameters[1] = trials;
   parameters[2] = triptime;
   parameters[3] = rdelay;*/

   
   
  }
  
void printScreen() {
  lcd.clear();
  //print the screen and it current contents
  lcd.print(screens[currentScreen][0]);
  lcd.setCursor(0,1);
  //print the units for the parameters on next line
  lcd.print(parameters[currentScreen]);
  lcd.print(" ");
  lcd.print(screens[currentScreen][1]);

}



void loop() {
  Blynk.run();//Run the Blynk library
 
if (digitalRead(OK_PIN) == HIGH) { //escape from menu and start monitoring the line
    
    potValue = analogRead(potPin); //read the analog actuating parameter
    voltage = potValue * (3.6/4095.0); // divide the maximum analog value with ESP32 ADC value
    seccurrent = (voltage/10000)*1000;   //Actuating secondary current - milliAmperes
    pricurrent = (voltage/(0.0002*10000))*1000;// load primary current - milliAmperes
    current =(voltage/(0.0002*10000)); // load primary current - Amperes 
   
    {
      Blynk.virtualWrite(V4, voltage); // write voltage actuating parameter blynk dashboard
      Blynk.virtualWrite(V5, seccurrent); // write current actuating parameter on blynk dashboard
      Blynk.virtualWrite(V7, pricurrent); // write primary load current on blynk dashboard
      Blynk.virtualWrite(V6, parameters[2]); // write operating time on blynk dashboard
      Blynk.virtualWrite(V8, parameters[3]); // write reset time on blynk dashboard
      Blynk.virtualWrite(V9, parameters[0]); // write pick-up value on blynk dashboard
      Blynk.virtualWrite(V0, parameters[1]); // write number of trials on blynk dashboard

      delay(500);
      
    }
    
    
    if (voltage > parameters[0]) {// check if the voltage is above the threshold value 
    lcd.setCursor (0,0);//LCD innitiation
    lcd.print(" FAULT DETECTED   ");//tells the user of the occurrence of the fault on LCD
    lcd.setCursor (0,1);
    lcd.print(" Breaking circuit  ");
    delay(100*parameters[2]); 
    potValue = analogRead(potPin); //getting the analog vaulue for processing
    voltage = potValue * (3.6/4095.0); //divide the maximum analog value with ESP32 ADC value
    seccurrent = (voltage/10000)*1000;   //convert primary current to secondary using CT ratio
    pricurrent = (voltage/(0.0002*10000));

    }
    
    if  (voltage > parameters[0]) {
    voltageAboveThreshold = true; //set the threshold as the actuating parameter
    {
      message_to_whatsapp("Alert!!! Fault..Relay Activated.");  // Sending alert message to WhatsApp
      delay(1000);
    }
    
    Blynk.logEvent("trip","WARNNG! Relay Tripped!"); // add event to blynk for tripping
    digitalWrite(relaypin, HIGH);//activate the trip coil to energize the CB
    lcd.setCursor (0,0);
    lcd.print("Faulty Conditions");//write on LCD
    lcd.setCursor (0,1);
    lcd.print("V= ");
    lcd.print(voltage);
    
    lcd.print("C= ");//included the current to allow remote monitoring
    lcd.print(current);
 
    
    highStateCount++; //innitiate the counter to determine when the 
                      //maximun number of trips are reached
    delay(parameters[3]*1500); //this is the reset time
    } 
    else { //this is the normal loop when actuating value is 
            //below threshold
    voltageAboveThreshold = false;
    digitalWrite(relaypin, LOW);
    lcd.setCursor (0,0);
    lcd.print("Normal Condition"); 
    lcd.setCursor (0,1);
    lcd.print("V= ");
    lcd.print(voltage);
    lcd.print("V");
    lcd.print("C= ");
    lcd.print(current);
    lcd.print("uA");
    delay(parameters[2]*100); // delay the operation time 
  
    }
    if (highStateCount >= parameters[1]) { // check if number of trips are greater
                                           //than the set value
    digitalWrite(relaypin, HIGH); // Set the output to high permanently
    while (true) {
    lcd.setCursor (0,0);
    lcd.print("Lock-out Stage....");//write on LCD about lock-out stage
    lcd.setCursor (0,1);
    lcd.print("Please Reset.....");
  
     {
      message_to_whatsapp("Alert!!! Fault..Relay in Lock-out Stage.");  
      delay(1000); // Sending alert message to WhatsApp
    }
    Blynk.logEvent("lock","WARNNG! Maximum Trips: Relay in Lock-out Stage."); 
    //add event for lockout on blynk
    } 
      
    }
    }
